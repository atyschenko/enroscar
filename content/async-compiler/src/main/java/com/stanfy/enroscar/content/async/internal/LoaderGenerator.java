package com.stanfy.enroscar.content.async.internal;

import com.squareup.javawriter.JavaWriter;
import com.stanfy.enroscar.content.async.Async;

import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.EnumSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;

import static com.stanfy.enroscar.content.async.internal.Utils.getReturnType;

/**
 * @author Roman Mazur - Stanfy (http://stanfy.com)
 */
final class LoaderGenerator {

  /** Generated class name suffix. */
  private static final String SUFFIX = "$Loader";

  /** Class name. */
  private final String className;
  /** Package name. */
  private final String packageName;

  /** Base clas. */
  private final TypeElement baseClass;

  /** Methods. */
  private final List<ExecutableElement> methods;

  /** Environment. */
  private final ProcessingEnvironment env;

  public LoaderGenerator(final ProcessingEnvironment env, final TypeElement type,
                         final List<ExecutableElement> methods) {
    this.baseClass = type;
    this.packageName = env.getElementUtils().getPackageOf(type).getQualifiedName().toString();
    String name = type.getQualifiedName().toString();
    this.className = packageName.length() > 0
        ? name.substring(packageName.length() + 1) + SUFFIX
        : name + SUFFIX;
    this.methods = methods;
    this.env = env;
  }

  public String getFqcn() {
    if (packageName.length() == 0) {
      return className;
    }
    return packageName + "." + className;
  }

  public void generateTo(final Writer out) throws IOException {
    JavaWriter w = new JavaWriter(out);

    w.emitSingleLineComment("Code generated by Enroscar. Do not edit. %s",
        new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
    w.emitPackage(packageName);

    w.emitImports(Async.class);
    w.emitEmptyLine();

    w.beginType(className, "class", modifiers(baseClass), baseClass.getSimpleName().toString());
    w.emitEmptyLine();

    for (ExecutableElement method : methods) {
      w.emitAnnotation(Override.class);
      w.beginMethod(Utils.getReturnType(method), method.getSimpleName().toString(),
          modifiers(method), parameters(w, method), null);
      callSuper(w, method);
      w.endMethod();
      w.emitEmptyLine();
    }

    w.endType();
  }

  private List<String> parameters(final JavaWriter w, final ExecutableElement method) {
    ArrayList<String> res = new ArrayList<>(method.getParameters().size());
    for (VariableElement arg : method.getParameters()) {
      TypeMirror type = arg.asType();
      res.add(w.compressType(type.toString()));
      res.add(arg.getSimpleName().toString());
    }
    return res;
  }

  private static void callSuper(final JavaWriter w, final ExecutableElement method)
      throws IOException {
    StringBuilder stmt = new StringBuilder()
        .append("return super.").append(method.getSimpleName()).append("(");
    if (!method.getParameters().isEmpty()) {
      for (VariableElement arg : method.getParameters()) {
        stmt.append(arg.getSimpleName().toString()).append(", ");
      }
      stmt.delete(stmt.length() - 2, stmt.length());
    }
    stmt.append(")");
    w.emitStatement(stmt.toString());
  }

  private static Set<Modifier> modifiers(final Element e) {
    Set<Modifier> modifiers = e.getModifiers();
    if (modifiers instanceof EnumSet) {
      return modifiers;
    }
    if (modifiers.isEmpty()) {
      return EnumSet.noneOf(Modifier.class);
    }
    return EnumSet.copyOf(modifiers);
  }

}
